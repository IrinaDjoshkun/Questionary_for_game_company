#include <iostream>
#include <vector>

/* Вопрос 1.
На языке С/С++, написать алгоритм (функцию) определения четности целого числа, который будет аналогичен нижеприведенному по функциональности, но отличен по своей сути.
Объяснить плюсы и минусы обеих реализаций.
C/C++ example: bool isEven(int value){return value%2==0;} */

//======================================================================================================================================================================
// Ответ на Вопрос 1.
//======================================================================================================================================================================

bool isEven(int value) {
    return (value & 1) == 0;
}

/* 
-----------------------------------------------------------------------------------------------------
Плюсы и минусы оригинальной реализации (используя оператор остатка от деления %):
-----------------------------------------------------------------------------------------------------
+
Простота и понятность кода.
Хорошая читаемость.
-
Для отрицательных чисел результат не всегда ожидаемый (например, -1 % 2 даст -1, а не 1).
Работает медленнее на некоторых компиляторах из-за операции деления. 

-----------------------------------------------------------------------------------------------------
Плюсы и минусы альтернативной реализации (используя побитовую операцию &):
-----------------------------------------------------------------------------------------------------

+
Быстрое выполнение, поскольку побитовые операции выполняются быстрее арифметических операций.
Корректно работает для отрицательных чисел.
-
В некоторых случаях может быть менее читаемым из-за использования битовых операций.*/

/* Вопрос 2. 
На языке С++, написать минимум по 2 класса реализовывающих циклический буфер.
Объяснить плюсы и минусы каждой реализации.*/

//======================================================================================================================================================================
// Ответ на Вопрос 2.
//======================================================================================================================================================================

// Реализация 1:

template<typename T>
class CircularBuffer {
private:
    std::vector<T> buffer;
    size_t capacity;
    size_t head;
    size_t tail;
    size_t size;

public:
    CircularBuffer(size_t capacity) : buffer(capacity), capacity(capacity), head(0), tail(0), size(0) {}

    void push(const T& item) {
        if (size == capacity) {
            std::cerr << "Buffer overflow!" << std::endl;
            return;
        }
        buffer[tail] = item;
        tail = (tail + 1) % capacity;
        size++;
    }

    T pop() {
        if (size == 0) {
            std::cerr << "Buffer underflow!" << std::endl;
            return T();
        }
        T item = buffer[head];
        head = (head + 1) % capacity;
        size--;
        return item;
    }

    bool isEmpty() const {
        return size == 0;
    }

    bool isFull() const {
        return size == capacity;
    }
};

/*
-----------------------------------------------------------------------------------------------------
 Плюсы и минусы  реализации:
-----------------------------------------------------------------------------------------------------
+
Гибкость в изменении размера буфера во время выполнения.
Может быть использована для создания буфера переменного размера.
-
Динамическое выделение памяти может привести к утечкам памяти.
Больше затрат по времени на управление памятью.*/

// Реализаця 2:

template<typename T, size_t Capacity>
class CircularBuffer {
private:
    T buffer[Capacity];
    size_t head;
    size_t tail;
    size_t size;

public:
    CircularBuffer() : head(0), tail(0), size(0) {}

    void push(const T& item) {
        if (size == Capacity) {
            std::cerr << "Buffer overflow!" << std::endl;
            return;
        }
        buffer[tail] = item;
        tail = (tail + 1) % Capacity;
        size++;
    }

    T pop() {
        if (size == 0) {
            std::cerr << "Buffer underflow!" << std::endl;
            return T();
        }
        T item = buffer[head];
        head = (head + 1) % Capacity;
        size--;
        return item;
    }

    bool isEmpty() const {
        return size == 0;
    }

    bool isFull() const {
        return size == Capacity;
    }
};

/*
-----------------------------------------------------------------------------------------------------
 Плюсы и минусы  реализации:
-----------------------------------------------------------------------------------------------------
+
Более быстрая и эффективная, так как использует статический массив.
Использование статического массива обеспечивает простоту и предсказуемость времени выполнения.
-
Ограничен фиксированным размером во время компиляции.
Не позволяет динамически изменять размер буфера во время выполнения.*/

/* Вопрос 3. 
На языке С/С++, написать функцию, которая быстрее всего (по процессорным тикам) отсортирует данный ей массив чисел.
Массив может быть любого размера со случайным порядком чисел (в том числе и отсортированным).
Объяснить почему вы считаете, что функция соответствует заданным критериям.*/

//======================================================================================================================================================================
// Ответ на Вопрос 3.
//======================================================================================================================================================================
void merge(std::vector<int>& arr, int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    std::vector<int> L(n1), R(n2);

    for (int i = 0; i < n1; ++i)
        L[i] = arr[left + i];
    for (int j = 0; j < n2; ++j)
        R[j] = arr[mid + 1 + j];

    int i = 0, j = 0, k = left;

    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            ++i;
        }
        else {
            arr[k] = R[j];
            ++j;
        }
        ++k;
    }

    while (i < n1) {
        arr[k] = L[i];
        ++i;
        ++k;
    }

    while (j < n2) {
        arr[k] = R[j];
        ++j;
        ++k;
    }
}

void mergeSort(std::vector<int>& arr, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);

        merge(arr, left, mid, right);
    }
}

void printList(const std::vector<int>& arr) {
    for (int i = 0; i < arr.size(); ++i)
        std::cout << arr[i] << " ";
    std::cout << std::endl;
}

int main() {
    std::vector<int> arr = { 12, 11, 13, 5, 6, 7 };
    int arr_size = arr.size();

    std::cout << "Given array is \n";
    printList(arr);

    mergeSort(arr, 0, arr_size - 1);

    std::cout << "\nSorted array is \n";
    printList(arr);

    return 0;
}

/* Этот метод слияния является наиболее эффективным, т.к. использует вектор для хранения элементов массива и рекурсивно разбивает массив на подмассивы до тех пор, 
пока их размер не станет равным 1. Затем он объединяет их в отсортированный массив.*/